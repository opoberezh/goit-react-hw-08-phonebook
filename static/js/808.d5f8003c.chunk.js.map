{"version":3,"file":"static/js/808.d5f8003c.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm.js","components/pages/Register.js"],"sourcesContent":["import { Formik, Field } from \"formik\";\nimport * as Yup from 'yup';\nimport { useDispatch } from \"react-redux\"\nimport { useState } from \"react\";\nimport { register } from \"redux/auth/operations\";\nimport { ImEyeBlocked, ImEye } from \"react-icons/im\";\nimport { TextField, Button, InputAdornment, IconButton } from '@mui/material';\nimport { styled } from '@mui/material/styles';\n\n\nconst StyledButton = styled(Button)({\n    backgroundColor: '#2F4F4F',\n    boxShadow: '6px 6px 6px 0px rgba(0, 0, 0, 0.55)',\n    transition: 'background-color 0.3s ease',\n    '&:hover': {\n        backgroundColor: '#1E3535',\n       color: '#ffffff',\n      },\n      '&:active': {\n        backgroundColor: '#1E3535',\n        color: '#ffffff',\n      },\n})\n\nconst RegisterSchema = Yup.object({\n    name: Yup.string()\n      .min(2, 'Too Short!')\n      .max(50, 'Too Long!')\n      .required('Name is required!'),\n    email: Yup.string('Enter your email')\n      .email('Enter a valid email')\n      .required('Email is required!'),\n    password: Yup.string('Enter your password')\n      .min(8, 'Password should be of minimum 8 characters length')\n      .required('Password is required'),\n  });\n  export const RegisterForm = () => {\n    const dispatch = useDispatch();\n    const [showPassword, setShowPassword] = useState(false);\n  \n    const handlePasswordVisibility = () => {\n      setShowPassword(prevShowPassword => !prevShowPassword);\n    };\n  \n    return (\n      <Formik\n        initialValues={{\n          name: '',\n          email: '',\n          password: '',\n        }}\n        validationSchema={RegisterSchema}\n        onSubmit={({ ...values }, actions) => {\n          dispatch(register({ ...values }));\n          actions.resetForm();\n        }}\n      >\n        {({ handleSubmit }) => (\n          <form style={{width: '300px',\n            margin: '0 auto',\n            textAlign: 'center',}} onSubmit={handleSubmit} >\n            <Field name=\"name\">\n              {({ field, form: { touched, errors } }) => (\n                <TextField style={{ \n                    boxShadow: \"6px 6px 6px 0px rgba(0,0,0,0.55)\",\n                  }}\n                  {...field}\n                  label=\"Name\"\n                  variant=\"outlined\"\n                  error={touched.name && Boolean(errors.name)}\n                  helperText={touched.name && errors.name}\n                  fullWidth\n                  margin=\"normal\"\n                  autoComplete=\"off\"\n                  size=\"small\"\n                />\n              )}\n            </Field>\n  \n            <Field name=\"email\">\n              {({ field, form: { touched, errors } }) => (\n                <TextField style={{ \n                    boxShadow: \"6px 6px 6px 0px rgba(0,0,0,0.55)\",\n                  }}\n                  {...field}\n                  label=\"Email\"\n                  variant=\"outlined\"\n                  error={touched.email && Boolean(errors.email)}\n                  helperText={touched.email && errors.email}\n                  fullWidth\n                  margin=\"normal\"\n                  autoComplete=\"off\"\n                  size=\"small\"\n                />\n              )}\n            </Field>\n  \n            <Field name=\"password\">\n              {({ field, form: { touched, errors } }) => (\n                <TextField style={{ \n                    boxShadow: \"6px 6px 6px 0px rgba(0,0,0,0.55)\",\n                  }}\n                  {...field}\n                  type={showPassword ? 'text' : 'password'}\n                  label=\"Password\"\n                  variant=\"outlined\"\n                  error={touched.password && Boolean(errors.password)}\n                  helperText={touched.password && errors.password}\n                  fullWidth\n                  margin=\"normal\"\n                  size=\"small\"\n                  autoComplete=\"off\"\n                  sx={{ mb: 2 }}\n                  InputProps={{\n                    endAdornment: (\n                      <InputAdornment position=\"end\">\n                        <IconButton onClick={handlePasswordVisibility}>\n                          {showPassword ? <ImEyeBlocked /> : <ImEye />}\n                        </IconButton>\n                      </InputAdornment>\n                    ),\n                  }}\n                />\n              )}\n            </Field>\n  \n            <StyledButton type=\"submit\" variant=\"contained\"  fullWidth>\n              REGISTER\n            </StyledButton>\n          </form>\n        )}\n      </Formik>\n    );\n  };","import { RegisterForm } from \"components/RegisterForm/RegisterForm\";\nimport { Helmet } from \"react-helmet\";\n\n\nexport default function Register() {\n    return (\n      <div>\n        <Helmet>\n          <title>Registration</title>\n        </Helmet>\n        <RegisterForm />\n      </div>\n    );\n  };"],"names":["StyledButton","styled","Button","backgroundColor","boxShadow","transition","color","RegisterSchema","Yup","name","min","max","required","email","password","RegisterForm","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","handlePasswordVisibility","prevShowPassword","_jsx","Formik","initialValues","validationSchema","onSubmit","_ref","actions","values","Object","assign","_objectDestructuringEmpty","register","_objectSpread","resetForm","children","_ref2","handleSubmit","_jsxs","style","width","margin","textAlign","Field","_ref3","field","_ref3$form","form","touched","errors","TextField","label","variant","error","Boolean","helperText","fullWidth","autoComplete","size","_ref4","_ref4$form","_ref5","_ref5$form","type","sx","mb","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","ImEyeBlocked","ImEye","Register","Helmet"],"sourceRoot":""}